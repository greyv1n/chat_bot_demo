{"version":3,"sources":["Gena2.js","App.js","reportWebVitals.js","index.js"],"names":["Gena2","inputRef","useRef","useState","users","setUsers","checkText","text","arrText","split","people","forEach","item","test","user","replace","name","countApple","map","obj","undefined","addToUsers","current","value","console","log","className","type","placeholder","ref","onClick","Object","keys","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAEA,SAASA,IACL,IAAMC,EAAWC,mBADJ,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,KAwBb,SAASC,EAAUC,GACf,IAAIC,EAAUD,EAAKE,MAAM,KACrBC,EAAS,GAEbF,EAAQG,SAAQ,SAAAC,GACZ,GAAI,oBAAoBC,KAAKD,GAAO,CAChC,IAAIE,EAAOF,EAAKG,QAAQ,UAAW,IACnCL,EAAM,sBACCA,GADD,CAEF,CACIM,KAAMF,EACNG,WAAY,SAIN,YAATL,GACLF,EAAOQ,KAAI,SAAAN,GAAI,OACXA,EAAKK,WAAaL,EAAKK,WAAa,QAKhDP,EAAOQ,KAAI,SAAAN,GAAI,OAxCnB,SAAoBO,GAAM,IACdH,EAASG,EAATH,KACAC,EAAeE,EAAfF,gBAEQG,IAAhBhB,EAAMY,GACFX,GAAS,SAACD,GACN,OAAO,YAAC,eACCA,GADT,kBACiBY,EAAOC,OAG5BZ,GAAS,SAACD,GACN,OAAO,YAAC,eACCA,GADT,kBACiBY,EAAOZ,EAAMY,GAAQC,OA4B3BI,CAAWT,MAC9BX,EAASqB,QAAQC,MAAQ,GAI7B,OAhDAC,QAAQC,IAAIrB,GAiDR,sBAAKsB,UAAU,YAAf,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAOC,KAAK,OAAOD,UAAU,QAAQE,YAAY,QAAQC,IAAK5B,IAC9D,wBAAQyB,UAAU,MAAMI,QAAS,kBAAMxB,EAAUL,EAASqB,QAAQC,QAAlE,kBACA,6BACKQ,OAAOC,KAAK5B,GAAOc,KAAI,SAAAN,GAAI,OACxB,kHACoBA,EADpB,MAC6BR,EAAMQ,GADnC,oBAASA,WAKrB,sBAAKc,UAAU,cAAf,UACI,0IACA,8XACA,+vBC1DDO,MARf,WACE,OACE,mCACE,cAACjC,EAAD,OCOSkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.594df806.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\n\r\nfunction Gena2() {\r\n    const inputRef = useRef();\r\n    const [users, setUsers] = useState({});\r\n    console.log(users)\r\n\r\n\r\n    function addToUsers(obj) {\r\n        const { name } = obj;\r\n        const { countApple } = obj;\r\n\r\n        users[name] === undefined ?\r\n            setUsers((users) => {\r\n                return (\r\n                    { ...users, [name]: countApple }\r\n                )\r\n            }) :\r\n            setUsers((users) => {\r\n                return (\r\n                    { ...users, [name]: users[name] + countApple }\r\n                )\r\n            })\r\n    }\r\n\r\n\r\n    function checkText(text) {\r\n        let arrText = text.split(' ');\r\n        let people = [];\r\n\r\n        arrText.forEach(item => {\r\n            if (/^<@[a-zA-Z0-9_]*>/.test(item)) {\r\n                let user = item.replace(/<|@|>/gi, '');\r\n                people = [\r\n                    ...people,\r\n                    {\r\n                        name: user,\r\n                        countApple: 0\r\n                    }\r\n                ];\r\n            }\r\n            else if (item === ':apple:') {\r\n                people.map(item =>\r\n                    item.countApple = item.countApple + 1\r\n                )\r\n            };\r\n        })\r\n\r\n        people.map(item => addToUsers(item));\r\n        inputRef.current.value = '';\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"wrap\">\r\n                <input type=\"text\" className=\"input\" placeholder=\"Share\" ref={inputRef} />\r\n                <button className=\"btn\" onClick={() => checkText(inputRef.current.value)}>Gena</button>\r\n                <ul>\r\n                    {Object.keys(users).map(item =>\r\n                        <li key={item}>\r\n                            У пользователя {item} : {users[item]} шт. </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div className='description'>\r\n                <h4>Варианты сообщений:</h4>\r\n                <p>- {`<@dmitry> <@anatoliy> `}:apple: :apple: - мы только что отправили Дмитрийю и Анатолию по два яблока.</p>\r\n                <p>- дарю яблоки другу диме{` <@dmitry>`} :apple: :apple: :pear: - Пользователь Дмитрий получит 2 яблока. Поскольку у нас нету бонусов в виде :pear: этот символ будет игнорироваться</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport { Gena2 }","import {Gena2} from './Gena2'\n\nfunction App() {\n  return (\n    <>\n      <Gena2 />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}